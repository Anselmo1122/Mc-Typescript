
TypeScript -----------------------------------------------


Sesión 1 -------------------------------------------------

TypeScript es un lenguaje de programación libre y de código abierto 
desarrollado y mantenido por Microsoft. Es un superconjunto de JavaScript, 
que esencialmente añade tipos estáticos y objetos basados en clases.

TypeScript es un superconjunto de JavaScript creado de la mano
de microsoft para poder darle un tipado fuerte a JavaScript junto 
con otras características típicas de lenguajes modernos.

Dependencias iniciales para trabajar con TypeScript:

 - @types/node: dependencia para instalar dependencias de ts.
 - nodemon: es para actualizar cambios en tiempo real.
 - ts-node: es para ejecutar cualquier archivo ts.
 - typescript: instalar ts. 

Comando para iniciar y configurar ts:

 - npx tsc --init --rootDir build --esModuleInterop --resolveJsonModule --lib es6 --module commonjs --allowjs true --noImplicitAny true

Al ejecutar este comando se generará un archivo "tsconfig.json" con 
todas las posibles configuraciones comentadas, excepto las que se definen
previamente al ejecutar el comando.

Ahora generaremos algunos scripts para empezar a ejecutar nuestros archivos.

 - "tsNode": "cd ./src && node index.ts"

  Ejecutará index.ts

 - "start": "nodemon"

  Ejecutará nodemon según la configuración dada.

 - "transpilation": "tsc"

  Ejecutará TypeScript compiler según la configuración, es decir,
  creará una carpeta llamada "build" con un archivo "index.js" producto
  de la transpilación de TypeScript a JavaScript.

  "build:prod": "rimraf ./build && tsc",

  Este cmd ejecuta rimraf en la carpeta "build", y además el comando tsc,
  el cual transpila el código de ts a js.
    
  "start:prod": "npm run build:prod && node build/index.js"

  Ejecuta el comando anterior y además ejecuta el index.js obtenido.


Sesión 2 -------------------------------------------------
Sesión 3 -------------------------------------------------
Sesión 4 -------------------------------------------------
Sesión 5 -------------------------------------------------
Sesión 6 -------------------------------------------------

Sesión 7 -------------------------------------------------

Patrones de diseño

    Se refieren a la organización y estructura de archivos empleada en un proyecto
  informático, tienen el objetivo de garantizar escalabilidad, buena gestión de la 
  información, entre otras características consideradas como buenas prácticas. Existe 
  una gran variedad de patrones de diseño, cada uno orientado a abarcar un conjunto de
  soluciones en concreto. Hoy en día es impresindible que los desarrolladores conozcan
  un abanico de patrones de diseño y que estos puedan adaptarlos segun las necesidades
  planteadas en un proyecto. A continuación hablaremos más acerca de cuales patrones
  existen:

  1. Patrones Creacionales
    - Mecanismos de creación de objetos.
    - Reutilización del código.
    - Ofrecer flexibilidad al código.

      - Factory Method
      - Abstract Factory
      - Builder 
      - Prototype 
      - Singleton

  2. Patrones Estructurales 
    - Eficiencia y flexibilidad de la estructura a la hora de definir clases y objetos.

      - Adapter 
      - Bridge 
      - Composite 
      - Decorator 
      - Facade 
      - Flyweight 
      - Proxy

  3. Patrones de Comportamiento
    - Centrados en la asignación efectiva de responsabilidad entre objetos.
    - Comunicación entre objetos.

      - Chain of Responsability
      - Command 
      - Iterator 
      - Mediator 
      - Observer 
      - State 
      - Strategy 
      - Visiter 

  Información sobre este tema: https://refactoring.guru/es/design-patterns/typescript

  Nota: "estudiar cada uno de los patrones de diseño e intentar replicarlos".
  

